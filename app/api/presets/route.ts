import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const mealType = searchParams.get("mealType");

    const whereClause: any = {
      isActive: true,
    };

    if (mealType) {
      whereClause.mealType = mealType;
    }

    const presets = await prisma.mealPreset.findMany({
      where: whereClause,
      include: {
        items: {
          orderBy: {
            order: "asc",
          },
        },
      },
      orderBy: [
        { patternScore: "desc" }, // Auto-generated with high score first
        { usageCount: "desc" }, // Then by usage
        { createdAt: "desc" },
      ],
    });

    return NextResponse.json(presets);
  } catch (error) {
    console.error("Error fetching presets:", error);
    return NextResponse.json(
      { error: "Preset'ler yüklenirken bir hata oluştu" },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, mealType, items } = body;

    if (!name) {
      return NextResponse.json(
        { error: "Preset adı zorunludur" },
        { status: 400 }
      );
    }

    const preset = await prisma.mealPreset.create({
      data: {
        name: name.trim(),
        mealType: mealType || null,
        isAutoGenerated: false,
        isActive: true,
        items: {
          create: (items || []).map((item: any, idx: number) => ({
            besinName: item.besinName || item.besin,
            miktar: item.miktar || "",
            birim: item.birim || "",
            order: idx,
          })),
        },
      },
      include: {
        items: true,
      },
    });

    return NextResponse.json(preset, { status: 201 });
  } catch (error) {
    console.error("Error creating preset:", error);
    return NextResponse.json(
      { error: "Preset oluşturulurken bir hata oluştu" },
      { status: 500 }
    );
  }
}
