import { apiClient } from "@/lib/api-client";

export interface MealPreset {
  id: number;
  name: string;
  mealType?: string | null;
  isAutoGenerated: boolean;
  patternScore?: number | null;
  isActive: boolean;
  usageCount: number;
  lastUsed?: Date | null;
  createdAt: Date;
  updatedAt: Date;
  items: PresetItem[];
}

export interface PresetItem {
  id: number;
  besinName: string;
  miktar: string;
  birim: string;
  order: number;
}

const PresetService = {
  // Get all presets
  async getPresets(mealType?: string): Promise<MealPreset[]> {
    try {
      const url = mealType
        ? `/presets?mealType=${mealType}`
        : "/presets";

      return await apiClient.get(url);
    } catch (error) {
      console.error("Error fetching presets:", error);
      return [];
    }
  },

  // Create preset
  async createPreset(data: {
    name: string;
    mealType?: string;
    items: Array<{
      besinName: string;
      miktar: string;
      birim: string;
    }>;
  }): Promise<MealPreset> {
    try {
      return await apiClient.post("/presets", data);
    } catch (error) {
      console.error("Error creating preset:", error);
      throw error;
    }
  },

  // Update preset
  async updatePreset(
    id: number,
    data: Partial<MealPreset>
  ): Promise<MealPreset> {
    try {
      return await apiClient.put(`/presets/${id}`, data);
    } catch (error) {
      console.error("Error updating preset:", error);
      throw error;
    }
  },

  // Delete preset
  async deletePreset(id: number): Promise<void> {
    try {
      await apiClient.delete(`/presets/${id}`);
    } catch (error) {
      console.error("Error deleting preset:", error);
      throw error;
    }
  },

  // Auto-generate presets
  async autoGeneratePresets(): Promise<{
    message: string;
    presets: MealPreset[];
    patternsDetected: number;
  }> {
    try {
      return await apiClient.post("/presets/auto-generate");
    } catch (error) {
      console.error("Error auto-generating presets:", error);
      throw error;
    }
  },
};

export default PresetService;
