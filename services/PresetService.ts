export interface MealPreset {
  id: number;
  name: string;
  mealType?: string | null;
  isAutoGenerated: boolean;
  patternScore?: number | null;
  isActive: boolean;
  usageCount: number;
  lastUsed?: Date | null;
  createdAt: Date;
  updatedAt: Date;
  items: PresetItem[];
}

export interface PresetItem {
  id: number;
  besinName: string;
  miktar: string;
  birim: string;
  order: number;
}

const PresetService = {
  // Get all presets
  async getPresets(mealType?: string): Promise<MealPreset[]> {
    try {
      const url = mealType
        ? `/api/presets?mealType=${mealType}`
        : "/api/presets";

      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        cache: "no-store",
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching presets:", error);
      return [];
    }
  },

  // Create preset
  async createPreset(data: {
    name: string;
    mealType?: string;
    items: Array<{
      besinName: string;
      miktar: string;
      birim: string;
    }>;
  }): Promise<MealPreset> {
    try {
      const response = await fetch("/api/presets", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to create preset");
      }

      return await response.json();
    } catch (error) {
      console.error("Error creating preset:", error);
      throw error;
    }
  },

  // Update preset
  async updatePreset(
    id: number,
    data: Partial<MealPreset>
  ): Promise<MealPreset> {
    try {
      const response = await fetch(`/api/presets/${id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to update preset");
      }

      return await response.json();
    } catch (error) {
      console.error("Error updating preset:", error);
      throw error;
    }
  },

  // Delete preset
  async deletePreset(id: number): Promise<void> {
    try {
      const response = await fetch(`/api/presets/${id}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to delete preset");
      }
    } catch (error) {
      console.error("Error deleting preset:", error);
      throw error;
    }
  },

  // Auto-generate presets
  async autoGeneratePresets(): Promise<{
    message: string;
    presets: MealPreset[];
    patternsDetected: number;
  }> {
    try {
      const response = await fetch("/api/presets/auto-generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to auto-generate presets");
      }

      return await response.json();
    } catch (error) {
      console.error("Error auto-generating presets:", error);
      throw error;
    }
  },
};

export default PresetService;
