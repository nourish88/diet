import React, { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  FlatList,
  StyleSheet,
  Modal,
  ActivityIndicator,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Sparkles, Star, X } from "lucide-react-native";

export interface MealPreset {
  id: number;
  name: string;
  mealType?: string | null;
  isAutoGenerated: boolean;
  patternScore?: number | null;
  isActive: boolean;
  usageCount: number;
  lastUsed?: Date | null;
  items: PresetItem[];
}

export interface PresetItem {
  id: number;
  besinName: string;
  miktar: string;
  birim: string;
}

interface PresetSelectorProps {
  visible: boolean;
  onClose: () => void;
  onSelect: (preset: MealPreset) => void;
  presets: MealPreset[];
  isLoading?: boolean;
  mealType?: string;
}

export default function PresetSelector({
  visible,
  onClose,
  onSelect,
  presets,
  isLoading = false,
  mealType,
}: PresetSelectorProps) {
  const [selectedId, setSelectedId] = useState<number | null>(null);

  const handleSelect = () => {
    const selected = presets.find((p) => p.id === selectedId);
    if (selected) {
      onSelect(selected);
      onClose();
      setSelectedId(null);
    }
  };

  // Separate auto-generated and manual presets
  const autoPresets = presets.filter((p) => p.isAutoGenerated);
  const manualPresets = presets.filter((p) => !p.isAutoGenerated);

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
      onRequestClose={onClose}
    >
      <SafeAreaView style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerLeft}>
            <Sparkles size={24} color="#667eea" />
            <View>
              <Text style={styles.headerTitle}>
                {mealType || "Ã–ÄŸÃ¼n"} Preset'leri
              </Text>
              <Text style={styles.headerSubtitle}>
                HazÄ±r kombinasyonlardan birini seÃ§in
              </Text>
            </View>
          </View>
          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <X size={24} color="#1f2937" />
          </TouchableOpacity>
        </View>

        {/* Content */}
        {isLoading ? (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color="#667eea" />
            <Text style={styles.loadingText}>Preset'ler yÃ¼kleniyor...</Text>
          </View>
        ) : presets.length === 0 ? (
          <View style={styles.emptyContainer}>
            <Sparkles size={48} color="#d1d5db" />
            <Text style={styles.emptyTitle}>HenÃ¼z preset bulunmuyor</Text>
            <Text style={styles.emptySubtitle}>
              Daha fazla diyet yazdÄ±kÃ§a sistem otomatik preset'ler oluÅŸturacak
            </Text>
          </View>
        ) : (
          <FlatList
            data={[
              ...(autoPresets.length > 0
                ? [{ type: "auto", presets: autoPresets }]
                : []),
              ...(manualPresets.length > 0
                ? [{ type: "manual", presets: manualPresets }]
                : []),
            ]}
            keyExtractor={(item, index) => `${item.type}-${index}`}
            renderItem={({ item }) => (
              <View style={styles.section}>
                {item.type === "auto" && (
                  <View style={styles.sectionHeader}>
                    <Sparkles size={16} color="#a855f7" />
                    <Text style={styles.sectionTitle}>
                      AkÄ±llÄ± Sistem Ã–nerileri
                    </Text>
                  </View>
                )}
                {item.type === "manual" && (
                  <View style={styles.sectionHeader}>
                    <Text style={styles.sectionTitle}>
                      ðŸ“‹ Manuel Preset'ler
                    </Text>
                  </View>
                )}
                {item.presets.map((preset) => (
                  <TouchableOpacity
                    key={preset.id}
                    style={[
                      styles.presetCard,
                      selectedId === preset.id && styles.presetCardSelected,
                    ]}
                    onPress={() => setSelectedId(preset.id)}
                  >
                    <View style={styles.presetContent}>
                      <View style={styles.presetHeader}>
                        <Text style={styles.presetName}>{preset.name}</Text>
                        {preset.patternScore && preset.patternScore >= 70 && (
                          <Star size={16} color="#fbbf24" fill="#fbbf24" />
                        )}
                      </View>
                      <View style={styles.presetItems}>
                        {preset.items.map((item, idx) => (
                          <Text key={idx} style={styles.presetItemText}>
                            â€¢ {item.besinName} {item.miktar} {item.birim}
                          </Text>
                        ))}
                      </View>
                      <View style={styles.presetFooter}>
                        {preset.patternScore && (
                          <Text style={styles.patternScore}>
                            %{Math.round(preset.patternScore)} benzerlik
                          </Text>
                        )}
                        {preset.usageCount > 0 && (
                          <Text style={styles.usageCount}>
                            {preset.usageCount}Ã— kullanÄ±ldÄ±
                          </Text>
                        )}
                      </View>
                    </View>
                    {selectedId === preset.id && (
                      <View style={styles.checkmark}>
                        <Text style={styles.checkmarkText}>âœ“</Text>
                      </View>
                    )}
                  </TouchableOpacity>
                ))}
              </View>
            )}
            contentContainerStyle={styles.listContent}
            showsVerticalScrollIndicator={false}
          />
        )}

        {/* Footer Actions */}
        <View style={styles.footer}>
          <TouchableOpacity style={styles.cancelButton} onPress={onClose}>
            <Text style={styles.cancelButtonText}>Ä°ptal</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.selectButton,
              !selectedId && styles.selectButtonDisabled,
            ]}
            onPress={handleSelect}
            disabled={!selectedId}
          >
            <Text style={styles.selectButtonText}>Preset'i Kullan</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    </Modal>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f8fafc",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#e5e7eb",
  },
  headerLeft: {
    flexDirection: "row",
    alignItems: "center",
    flex: 1,
    gap: 12,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: "700",
    color: "#1f2937",
  },
  headerSubtitle: {
    fontSize: 14,
    color: "#6b7280",
    marginTop: 2,
  },
  closeButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: "#f3f4f6",
    justifyContent: "center",
    alignItems: "center",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 60,
  },
  loadingText: {
    marginTop: 12,
    fontSize: 16,
    color: "#6b7280",
  },
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 60,
    paddingHorizontal: 40,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: "600",
    color: "#374151",
    marginTop: 16,
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 14,
    color: "#6b7280",
    textAlign: "center",
    lineHeight: 20,
  },
  listContent: {
    padding: 20,
  },
  section: {
    marginBottom: 24,
  },
  sectionHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
    gap: 8,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: "600",
    color: "#374151",
  },
  presetCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: "#e5e7eb",
    flexDirection: "row",
    alignItems: "flex-start",
  },
  presetCardSelected: {
    borderColor: "#667eea",
    backgroundColor: "#f0f4ff",
  },
  presetContent: {
    flex: 1,
  },
  presetHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
    gap: 8,
  },
  presetName: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1f2937",
    flex: 1,
  },
  presetItems: {
    marginBottom: 8,
    gap: 4,
  },
  presetItemText: {
    fontSize: 14,
    color: "#6b7280",
    lineHeight: 20,
  },
  presetFooter: {
    flexDirection: "row",
    gap: 12,
    marginTop: 4,
  },
  patternScore: {
    fontSize: 12,
    color: "#a855f7",
    fontWeight: "600",
  },
  usageCount: {
    fontSize: 12,
    color: "#9ca3af",
  },
  checkmark: {
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: "#667eea",
    justifyContent: "center",
    alignItems: "center",
    marginLeft: 12,
  },
  checkmarkText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "700",
  },
  footer: {
    flexDirection: "row",
    gap: 12,
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: "#fff",
    borderTopWidth: 1,
    borderTopColor: "#e5e7eb",
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 12,
    backgroundColor: "#f3f4f6",
    alignItems: "center",
    justifyContent: "center",
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#374151",
  },
  selectButton: {
    flex: 1,
    paddingVertical: 14,
    borderRadius: 12,
    backgroundColor: "#667eea",
    alignItems: "center",
    justifyContent: "center",
  },
  selectButtonDisabled: {
    backgroundColor: "#d1d5db",
  },
  selectButtonText: {
    fontSize: 16,
    fontWeight: "600",
    color: "#fff",
  },
});
