// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Client {
  id          Int          @id @default(autoincrement())
  name        String
  surname     String
  birthdate   DateTime?
  phoneNumber String?
  notes       String?
  gender      Int?
  illness     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  diets       Diet[]
  bannedFoods BannedFood[]
}

model Diet {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tarih     DateTime?

  su    String?
  sonuc String?
  hedef String?
  fizik String?
  dietitianNote String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  oguns Ogun[]

  isBirthdayCelebration        Boolean        @default(false)

  importantDateId              Int?
  importantDate               ImportantDate? @relation(fields: [importantDateId], references: [id])
  isImportantDateCelebrated   Boolean        @default(false)
}

model Ogun {
  id        Int         @id @default(autoincrement())
  name      String
  time      String
  detail    String?
  order     Int        @default(0)
  dietId    Int
  diet      Diet       @relation(fields: [dietId], references: [id])
  items     MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  miktar    String?

  besinId   Int
  besin     Besin    @relation(fields: [besinId], references: [id])

  birimId   Int?
  birim     Birim?   @relation(fields: [birimId], references: [id])

  ogunId    Int
  ogun      Ogun     @relation(fields: [ogunId], references: [id], onDelete: Cascade)
}

model Besin {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String       @unique
  priority    Int         @default(0)
  groupId     Int?        // Keep this for backward compatibility
  besinGroup  BesinGroup? @relation(fields: [groupId], references: [id])
  bannedFoods BannedFood[]
  menuItems   MenuItem[]
}
model BesinGroup {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  besins      Besin[]
}

model Birim {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  name      String     @unique
  menuItems MenuItem[]
}


model BannedFood {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  Int
  besinId   Int
  reason    String?
  client    Client   @relation(fields: [clientId], references: [id])
  besin     Besin    @relation(fields: [besinId], references: [id])

  @@unique([clientId, besinId])
}

model ImportantDate {
  id          Int       @id @default(autoincrement())
  name        String
  message     String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Add the opposite relation field
  diets       Diet[]
}
