// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Client {
  id          Int          @id @default(autoincrement())
  name        String
  surname     String
  birthdate   DateTime?
  phoneNumber String?      @unique
  notes       String?
  gender      Int?
  illness     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  diets       Diet[]
  bannedFoods BannedFood[]
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?         @unique
  dietitianId Int?         // NEW: Assign to specific dietitian
  dietitian   User?        @relation("ClientDietitian", fields: [dietitianId], references: [id])
  mealPhotos  MealPhoto[]
  comments    Comment[]
}

model Diet {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tarih     DateTime?

  su    String?
  sonuc String?
  hedef String?
  fizik String?
  dietitianNote String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
  dietitianId Int?    // NEW: Assign to specific dietitian
  dietitian   User?   @relation("DietDietitian", fields: [dietitianId], references: [id])

  oguns Ogun[]
  comments DietComment[]
  mealPhotos MealPhoto[]

  isBirthdayCelebration        Boolean        @default(false)

  importantDateId              Int?
  importantDate               ImportantDate? @relation(fields: [importantDateId], references: [id])
  isImportantDateCelebrated   Boolean        @default(false)
}

model Ogun {
  id        Int         @id @default(autoincrement())
  name      String
  time      String
  detail    String?
  order     Int        @default(0)
  dietId    Int
  diet      Diet       @relation(fields: [dietId], references: [id])
  items     MenuItem[]
  comments  DietComment[]
  mealPhotos MealPhoto[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  miktar    String?

  besinId   Int
  besin     Besin    @relation(fields: [besinId], references: [id])

  birimId   Int?
  birim     Birim?   @relation(fields: [birimId], references: [id])

  ogunId    Int
  ogun      Ogun     @relation(fields: [ogunId], references: [id], onDelete: Cascade)
  comments  DietComment[]
}

model Besin {
  id          Int               @id @default(autoincrement())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  name        String            @unique
  priority    Int               @default(0)
  groupId     Int?              // Keep this for backward compatibility
  besinGroup  BesinGroup?       @relation(fields: [groupId], references: [id])
  bannedFoods BannedFood[]
  menuItems   MenuItem[]
  usageStats  BesinUsageStats?
}
model BesinGroup {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  besins      Besin[]
}

model Birim {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  name      String     @unique
  menuItems MenuItem[]
}


model BannedFood {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clientId  Int
  besinId   Int
  reason    String?
  client    Client   @relation(fields: [clientId], references: [id])
  besin     Besin    @relation(fields: [besinId], references: [id])

  @@unique([clientId, besinId])
}

model ImportantDate {
  id          Int       @id @default(autoincrement())
  name        String
  message     String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dietitianId Int?      // NEW: Assign to specific dietitian
  dietitian   User?     @relation("ImportantDateDietitian", fields: [dietitianId], references: [id])
  
  // Add the opposite relation field
  diets       Diet[]
}

model Definition {
  id          Int      @id @default(autoincrement())
  type        String   // "su_tuketimi" veya "fiziksel_aktivite"
  name        String   // TanÄ±mlama metni
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([type, isActive])
}

model BesinUsageStats {
  id          Int      @id @default(autoincrement())
  besinId     Int      @unique
  besin       Besin    @relation(fields: [besinId], references: [id], onDelete: Cascade)
  usageCount  Int      @default(1)
  avgMiktar   String?  // "2", "30", "1"
  commonBirim String?  // "adet", "gram", "porsiyon"
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([usageCount, lastUsed])
}

model DietTemplate {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  category    String?        // "kilo_verme", "kilo_alma", "diyabet" vb.
  su          String?
  fizik       String?
  hedef       String?
  sonuc       String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  dietitianId Int?           // NEW: Assign to specific dietitian
  dietitian   User?          @relation("TemplateDietitian", fields: [dietitianId], references: [id])
  oguns       TemplateOgun[]
}

model TemplateOgun {
  id         Int                @id @default(autoincrement())
  templateId Int
  template   DietTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  name       String
  time       String
  detail     String?
  order      Int
  items      TemplateMenuItem[]
}

model TemplateMenuItem {
  id        Int          @id @default(autoincrement())
  ogunId    Int
  ogun      TemplateOgun @relation(fields: [ogunId], references: [id], onDelete: Cascade)
  besinName String
  miktar    String
  birim     String
  order     Int          @default(0)
}

model MealPreset {
  id              Int          @id @default(autoincrement())
  name            String
  mealType        String?      // "kahvalti", "ara_ogun", "ogle", "aksam"
  isAutoGenerated Boolean      @default(false)
  patternScore    Float?
  isActive        Boolean      @default(true)
  usageCount      Int          @default(0)
  lastUsed        DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  dietitianId     Int?         // NEW: Assign to specific dietitian
  dietitian       User?        @relation("PresetDietitian", fields: [dietitianId], references: [id])
  items           PresetItem[]
  
  @@index([mealType, isActive])
  @@index([patternScore])
}

model PresetItem {
  id        Int        @id @default(autoincrement())
  presetId  Int
  preset    MealPreset @relation(fields: [presetId], references: [id], onDelete: Cascade)
  besinName String
  miktar    String
  birim     String
  order     Int        @default(0)
}

// Mobile App Models

model User {
  id            Int       @id @default(autoincrement())
  supabaseId    String    @unique
  email         String    @unique
  role          String    // "dietitian" or "client"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Reference code for client matching
  referenceCode String?   @unique  // e.g., "REF-A1B2C3"
  isApproved    Boolean   @default(false)
  approvedAt    DateTime?
  
  client        Client?
  comments      DietComment[]
  notificationPreference NotificationPreference?
  
  // Relations for multi-dietitian support
  clients       Client[] @relation("ClientDietitian")
  diets         Diet[]   @relation("DietDietitian")
  
  // NEW: Relations for dietitian-owned resources
  templates     DietTemplate[] @relation("TemplateDietitian")
  importantDates ImportantDate[] @relation("ImportantDateDietitian")
  presets       MealPreset[] @relation("PresetDietitian")
  apiKeys       ApiKey[]
  
  @@index([supabaseId])
  @@index([email])
}

model DietComment {
  id          Int      @id @default(autoincrement())
  content     String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  dietId      Int
  diet        Diet     @relation(fields: [dietId], references: [id])
  ogunId      Int?     // Optional: specific meal
  ogun        Ogun?    @relation(fields: [ogunId], references: [id])
  menuItemId  Int?     // Optional: specific item
  menuItem    MenuItem? @relation(fields: [menuItemId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([dietId, createdAt])
}

model MealPhoto {
  id          Int      @id @default(autoincrement())
  imageData   String   // Base64 encoded image data
  dietId      Int
  diet        Diet     @relation(fields: [dietId], references: [id])
  ogunId      Int      // Which meal
  ogun        Ogun     @relation(fields: [ogunId], references: [id])
  clientId    Int
  client      Client   @relation(fields: [clientId], references: [id])
  uploadedAt  DateTime @default(now())
  expiresAt   DateTime // Auto-delete date
  
  @@index([dietId, ogunId])
  @@index([expiresAt])
}

model NotificationPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  mealReminders Boolean @default(true)
  dietUpdates   Boolean @default(true)
  comments      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// API Key Management for External Applications
model ApiKey {
  id          Int      @id @default(autoincrement())
  key         String   @unique // Hashed API key
  name        String   // Human-readable name for the key
  appName     String   // "mobile_app", "website", "integration", etc.
  permissions Json     // Allowed endpoints and operations
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  lastUsedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  dietitianId Int
  dietitian   User     @relation(fields: [dietitianId], references: [id], onDelete: Cascade)
  
  @@index([key])
  @@index([dietitianId])
  @@index([isActive, expiresAt])
}
